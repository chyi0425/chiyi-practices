package com.chiyi.algorithms;

import java.text.NumberFormat;

/**
 * @author chiyi
 * @date 2018/7/23.
 */
public class Test {
    public static void main(String[] args) {
        /**
         * 1. 左移(int 占4个byte,每个byte占8个bit,第一位是符号位)
         * 0000 0000 0000 0000 0000 0000 0000 0111 (7的补码，低位补0)
         * 0000 0000 0000 0000 0000 0000 0011 1000 (换算成10进制为(56))
         */
        System.out.println("左移3位： " + (7 << 3));

        /**
         * 2. 右移
         * 1000 0000 0000 0000 0000 0000 0011 1000 (-56)
         * 1111 1111 1111 1111 1111 1111 1100 0111 (-56的反码)
         * 1111 1111 1111 1111 1111 1111 1100 1000 (-56的补码)
         * 1111 1111 1111 1111 1111 1111 1111 1001 (-56的补码右移三位，高位补1)
         * 1000 0000 0000 0000 0000 0000 0000 0110 (减1，取反，得到源码，换算成10进制，（-7）)
         */
        System.out.println("右移3位： " + (-56 >> 3));

        /**
         * 3. 无符号右移-负数(其中左移只有有符号左移，原因是不管有符号，还是无符号，都是在右边补0所以没有区别）
         * 1111 1111 1111 1111 1111 1111 1100 0111 (-56的反码)
         * 1111 1111 1111 1111 1111 1111 1100 1000 (-56的补码)
         * 0001 1111 1111 1111 1111 1111 1111 1001 (补码无符号右移3位，高位补0，获得结果为正数，补码与原码相等)
         */
        System.out.println("无符号负数右移3位： " + (-56 >>> 3));

        /**
         * 4. 无符号右移-正数
         * 0000 0000 0000 0000 0000 0000 0011 1000 (56)右移3位，地位补0
         * 0000 0000 0000 0000 0000 0000 0000 0111 换算成10进制为7
         */
        System.out.println("无符号正数右移3位:" + (56 >>> 3));

        /**
         * 5. 补位
         * 对某个数字取固定长度的时候，如果长度不够，高位补0
         * 如下为6位
         */
        int num = 123;
        NumberFormat formatter = NumberFormat.getNumberInstance();
        formatter.setMinimumIntegerDigits(6);
        formatter.setGroupingUsed(false);
        String s = formatter.format(num);
        System.out.println("获取固定长度为6位的数字字符串：" + s);


        /**
         * 6. 位与
         * 0000 0000 0000 0000 0000 0000 0000 0111 From (7)
         * 0000 0000 0000 0000 0000 0000 0000 0101 And (5)
         * 0000 0000 0000 0000 0000 0000 0000 0101 Result(5)
         */
        System.out.println("位与操作：" + (7 & 5));

        /**
         * 7. 位或
         * 0000 0000 0000 0000 0000 0000 0000 0111 From (7)
         * 0000 0000 0000 0000 0000 0000 0000 0101 And (5)
         * 0000 0000 0000 0000 0000 0000 0000 0111 Result (7)
         */
        System.out.println("位或操作：" + (7 | 5));

        /**
         * 8. 位异或
         * 0000 0000 0000 0000 0000 0000 0000 0011 From (3)
         * 0000 0000 0000 0000 0000 0000 0000 0101 From (5)
         * 0000 0000 0000 0000 0000 0000 0000 0110 Result (6)
         */
        System.out.println("位异或操作：" + (3^5));

        /**
         * 9. 位非
         * 0000 0000 0000 0000 0000 0000 0000 0101 From (5) 补码是本身
         * 1111 1111 1111 1111 1111 1111 1111 1010 取反得到结果的补码(负数)
         * 1111 1111 1111 1111 1111 1111 1111 1001 补码-1 = 反码
         * 1000 0000 0000 0000 0000 0000 0000 0110 结果的原码换算成10进制(-6)
         */
        System.out.println("位非："+(~5));
    }
}
